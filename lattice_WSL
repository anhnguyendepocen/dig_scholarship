# 9.3.2016
# J. Wunder
# Extra Annotations N. Chardon (#comment)
# Scientific Visualisations using R

# L A T T I C E   G R A P H I C S

# Set working directory
setwd("~/Desktop/SLF/dat_vis/R_Server")

# Install & load library
# install.packages("lattice")
library(lattice)


# E X A M P L E S

# Plots witH one variable
bwplot(~waiting, faithful)
densityplot(~waiting, faithful)
histogram(~waiting, faithful)


# Plots with two variables
xyplot(eruptions~waiting, faithful)
dotplot(rownames(mtcars)~mpg, mtcars)


# Plots with three (and more) variables
# a) Data exploration
splom(iris)
xyplot(Sepal.Length~Sepal.Width|Species, data=iris)

# b) 3-D plots
wireframe(volcano)



# T H E   I R I S - D A T A

?iris
# Modify data set to include 2nd categorizing variable "Location"
iris <- read.table("Data/iris.txt")

# Goal: Customise the plot appearance by customising 
# 1) High-level-plotting functions (xyplot)
# 2) "Low-level-plotting" via PANEL FUNCTIONS (panel.abline)
# 3) Interactive control (grid.locator)
# 4) Graphical parameter control (trellis.par.set)
# 5) Device control (trellis.device)



# 1) H I G H - L E V E L plotting functions

# NEW - Update Graphics
xyplot(Sepal.Length ~ Petal.Length, data = iris)
trellisPlot1 <- xyplot(Sepal.Length ~ Petal.Length, data = iris)
trellisPlot1
class(trellisPlot1)
update(trellisPlot1, main = "Iris data") #add to original plot
update(trellisPlot1, col=2)

# NEW - Automation
update(trellisPlot1, type=c("p","r")) #points (p) and regression (r)
update(trellisPlot1, type = c("p","smooth")) #smoothed regression line for visualization only

# NEW - Multipanel conditioning ("|" or "group")
#subset by spp into separate strip
tp1 <- xyplot(Sepal.Length ~ Sepal.Width | Species, data = iris)
tp1
# conditioning variables within the formula argument
# here: showing sepal length ~ sepal width for each species 

# shingle: factor with levels generated from numeric variables
#different color by spp (col automatically defined)
xyplot(Sepal.Length ~ Sepal.Width, groups = Species, data = iris)

#split into spp or location (panel) AND into location or spp (color)
xyplot(Sepal.Length ~ Sepal.Width | Species, groups = Location, data = iris)
xyplot(Sepal.Length ~ Sepal.Width | Location, groups = Species, data = iris)

#by species AND location
xyplot(Sepal.Length ~ Sepal.Width | Species * Location, data = iris)

tp1
update(tp1, strip = strip.custom(style = 4)) #highlight spp in panel
update(tp1, strip = strip.custom(style = 3))
update(tp1, strip = strip.custom(style = 2))
update(tp1, strip = strip.custom(style = 1))


# NEW - Design rules
# 45° banking rule
# (using the sunspots again since this is an ideal example for the 45° banking rule)
xyplot(sunspot.year)

xyplot(sunspot.year, aspect="fill") # use available space (default)
xyplot(sunspot.year, aspect="xy") # 45° banking rule

#make cuts in time series and give small overlap
xyplot(sunspot.year, 
       aspect = "xy", #computes aspct ratio according to 45º banking rule
       strip = F, #no strips on panel tops
       strip.left = TRUE, #strips on panel left side
       cut = list(number = 3, overlap = 0.05), col="darkblue", lwd=3)


# Further fine-tuning...
tp2 <- xyplot(Sepal.Length ~ Sepal.Width | Species, groups = Location, data = iris)
tp2
# Legend:
update(tp2, auto.key = T)
update(tp2, auto.key = list(column=2)) #legend in two cols
update(tp2, auto.key = list(space="right")) #legend on right
update(tp2, auto.key = list(space="right", title="Location")) #add legend title
update(tp2, auto.key = list(x = 0.7, y = 0.8)) #legend in plot

# Title and axes labels:
update(tp2, main = "Iris data", ylab="Sepal width (cm)", xlab="Sepal length (cm)")

# Order of panels within multipanel plots:
update(tp2, layout=c(1,3)) # cols, rows
update(tp2, layout=c(1,3), as.table=TRUE) # small to large
update(tp2, layout=c(1,3), index.cond=list(c(2,3,1))) #specify order of panels


tp3 <- xyplot(Sepal.Length ~ Sepal.Width | Species, groups = Location, data = iris,
            #regression line and points per data
            main =   list(label="Iris data set", cex=1.5), type = c("p", "r"),
            xlab =   list(label="Sepal length (mm)", cex=1.5),
            ylab =   list(label="Sepal width (mm)", cex=1.5),
            #set scales to data within panel
            scales = list(y=list(relation = "free"),cex=1.2))  
tp3

update(tp1, type=c("p","r"), par.settings=simpleTheme(col="red", col.line="blue"))
update(tp1, type=c("p","r"), par.settings=simpleTheme(col="red", col.line="blue"),
       cex=1.5, lwd=1.5,
       par.strip.text=list(cex=1.5), strip=strip.custom(style=1))



# 2) P A N E L  F U N C T I O N S  for "low-level-plotting"

#define lines to add to future plot
mypanel<-function(x,y,...){
  panel.xyplot(x, y, ...)
  panel.abline(h=7, lty=2)
}
xyplot(Sepal.Length~Sepal.Width|Species, iris, panel=mypanel, layout=c(2,2))


trellis.focus(name="panel",column=1,row=2) #focus on a panel in col=1, row=1
panel.abline(h=6, col="blue", lty=2)
trellis.unfocus() #remove focus

trellis.focus("panel", column=1, row=1)
panel.lines(c(2,3,5), c(4,4.5,6)) #add lines to specified panel
trellis.unfocus()

trellis.focus("panel", column=2, row=1)
#add regression line to specified panel
panel.lmline(iris$Sepal.Width[iris$Species=="versicolor"], 
             iris$Sepal.Length[iris$Species=="versicolor"],
             col=3, lwd=2)
trellis.unfocus()

trellis.focus("panel", column=2, row=1)
#loess smoother to range of data
panel.loess(iris$Sepal.Width[iris$Species=="versicolor"], iris$Sepal.Length[iris$Species=="versicolor"], 
            col=5, lwd=4)
trellis.unfocus()

#add text
trellis.focus("panel", column=2, row=1)
panel.text("Some text", x=3, y=5) #coordinates of text
trellis.unfocus()


# Violin plots via panel.violin
bwplot(~Sepal.Length, data = iris, panel=panel.violin, xlim=c(3,9))


# add equation
# install.packages("latticeExtra")
library(latticeExtra)
#add regression line and print fitted function
xyplot(Sepal.Length~Sepal.Width|Species, iris, layout=c(1,3),
       panel = function(x, y, ...) {
         panel.xyplot(x, y, ...)
         panel.lmlineq(x, y, adj=c(-0.4,1), digits = 2,r.squared =TRUE)
       })



# 3) I N T E R A C T I V E  C O N T R O L

xyplot(Sepal.Length ~ Sepal.Width, data = iris)
trellis.focus("panel", 1, 1) #draw only first panel
panel.identify() #click on point of interest
trellis.unfocus()

xyplot(Sepal.Length ~ Sepal.Width|Species, data = iris)
trellis.focus("panel", 1, 1)
# install.packages("grid")
library(grid)
unlist(grid.locator()) # unlist: simplify list with native coordinate system 
trellis.unfocus()



# 4) G R A P H I C A L  P A R A M E T E R  C O N T R O L 
# parameter settings, control the appearance of the graphs

show.settings()

trellis.par.get("plot.line") #get plot settings
trellis.par.set("plot.line"=list(lty=3, lwd=4)) #set plot settings
xyplot(Sepal.Length ~ Sepal.Width|Species, data=iris, type =c("p","r"))
trellis.par.get("plot.line")
dev.off()
xyplot(Sepal.Length ~ Sepal.Width|Species, data=iris, type =c("p","r"))


# Multiple plots
tp4 <- xyplot(Sepal.Length~Sepal.Width, data=iris, subset=Species=="virginica", 
              main = "Iris virginica")
tp5 <- xyplot(Petal.Length~Petal.Width, data=iris, subset=Species=="setosa", 
              main = "Iris setosa")
tp6 <- histogram(~Sepal.Width,  data=iris, subset=Species=="virginica", 
                 main = "Sepal width")
tp7 <- histogram(~Sepal.Length, data=iris, subset=Species=="virginica", 
                 main = "Sepal length")

library(gridExtra)
grid.arrange(tp4, tp5) #arrange certain plots together

print(tp4, position=c(0,0.5,1,1), more=T)
print(tp5, position=c(0,0,1,0.5))

grid.newpage()
#set positions of plots (same as layout() in traditional graphics)
print(tp4, position=c(0,0.5,1,1), more=T)
print(tp6, position=c(0,0,0.5,0.5), more=T)
print(tp7, position=c(0.5,0,1,0.5))
 


# 5) D E V I C E  C O N T R O L 
# device settings to save graphs

trellisPlot1

getwd() # check working directory
# setwd() # set working directory

# PDF:
pdf("trellisPlot1.pdf")
print(trellisPlot1) #save plot from above
dev.off()

# PNG:
png("trellisPlot1.png")
print(trellisPlot1)
dev.off()

# Alternative:
trellis.device(device = "png", filename="trellisPlot1.jpeg")
print(trellisPlot1)
dev.off()

?trellis.device

## E X E R C I S E  2 ##

#load data from lattice package
data(barley)

#box-whisker plot of yield by site
bwplot(yield ~ site, data=barley)

#box-whisker plot of yield by site per year
bwplot(yield ~ site | year, data=barley)

#set panel settings
names(trellis.par.get()) #check all options
trellis.par.set(strip.background=list(col="lightgrey"))

#dotplot for yield of each variety
dots <- dotplot(yield ~ variety | site, group=year, data=barley,
                xlab=list('Variety', fontsize=14), 
                ylab=list('Yield', fontsize=14),
                main=list('Variety Yield per Site and Year'),
                scales=list(x=list(rot=45), #rotate xlab ticks 45º
                            alternating=F), #ticks all on one side
                auto.key=list(reverse.row=T, #reversal of legend
                              space='right', title="Year")) #add legend

#change panel order
update(dots, as.table=T) #small to large yield
update(dots, index.cond=list(c(6,5,4,3,2,1))) #reverse order

#change panel layout
update(dots, layout=c(2,3))

dev.off()
